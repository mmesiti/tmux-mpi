#!/usr/bin/env python3
"""
Usage: wmpi <nproc> <command>
System requirements: dtach, tmux
Pip requirements: libtmux
"""


import libtmux
import sys
import subprocess
import tempfile
import os
import glob
import time


if __name__ == "__main__":

    nproc = int(sys.argv[1])
    cmd = sys.argv[2:]

    temp_dir = tempfile.TemporaryDirectory(prefix="wmpi")

    # generate the dtach command
    dtach_prefix = " ".join(["dtach", "-n", "$(mktemp -p {} -d)/dtach.socket".format(temp_dir.name)])
    print(dtach_prefix)

    # we use a file as lock that prevents the command from starting before the tmux windows are connected
    lock_file = os.path.join(temp_dir.name, "lock")
    cmd_block = " until [ -f " + lock_file + " ]; do sleep 1; done;"
    print(cmd_block)
    cmd = " ".join(cmd)
    cmd_block = " bash -c " + "'" + cmd_block + cmd + "'"
    print(cmd_block)

    cmd = dtach_prefix + cmd_block

    print("CMD", cmd)

    launch_cmd = ("mpiexec", "-n", str(nproc), "bash", "-c", cmd)
    print(launch_cmd)

    # do the mpi launch
    mpiproc = subprocess.Popen(launch_cmd)

    # Wait for all the dtach processes to create sockets before trying to connect to them
    def get_socket_files():
        return glob.glob(os.path.join(temp_dir.name, "*", "dtach.socket"))

    time.sleep(0.2)
    socket_files = get_socket_files()
    while len(socket_files) != nproc:
        print("Waiting for dtach sockets to appear. Found {} out of {}.".format(len(socket_files), nproc))
        time.sleep(0.2)
        socket_files = get_socket_files()
    print("Waiting for dtach sockets to appear. Found {} out of {}.".format(len(socket_files), nproc))

    # start a tmux session with name "wmpi"
    tmux_server = libtmux.Server()
    tmux_session = tmux_server.new_session("wmpi")
    tmux_session.set_option("remain-on-exit", "on")

    # create a new window in the tmux session for each dtach instance
    for px in range(nproc):
        win_cmd = "dtach -a " + socket_files[px]
        w = tmux_session.new_window(attach=False, window_name=str(px))
        pane = w.list_panes()[0]
        pane.send_keys(win_cmd)

    # write the lock file that lets the user command launch
    with open(lock_file, "w") as fh:
        fh.write("1")

    # Try to terminate cleanly
    mpiproc.communicate()
    a = input("Press Enter to kill tmux session and quit")
    tmux_session.kill_session()
    temp_dir.cleanup()
