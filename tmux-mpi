#!/usr/bin/env python3
"""
Usage: wmpi <nproc> <command>
System requirements: dtach, tmux
Pip requirements: libtmux
"""

import libtmux
import sys
import subprocess
import tempfile
import os
import glob
import time
import shutil
import pty

PROGRAM_PATH = os.path.abspath(__file__)


def main():

    nproc = int(sys.argv[1])
    cmd = sys.argv[2:]

    # directory for lock files and dtach sockets
    temp_dir = tempfile.TemporaryDirectory(prefix="wmpi")

    # do the mpi launch
    launch_cmd = ["mpiexec", "-n", str(nproc), sys.executable, PROGRAM_PATH, "DTACH_CHILD", temp_dir.name] + cmd
    mpiproc = subprocess.Popen(launch_cmd)

    # Wait for all the dtach processes to create sockets before trying to connect to them
    def get_socket_files():
        return glob.glob(os.path.join(temp_dir.name, "*", "dtach.socket"))

    time.sleep(0.2)
    socket_files = get_socket_files()
    while len(socket_files) != nproc:
        print("Waiting for dtach sockets to appear. Found {} out of {}.".format(len(socket_files), nproc))
        time.sleep(0.2)
        socket_files = get_socket_files()
    print("Waiting for dtach sockets to appear. Found {} out of {}.".format(len(socket_files), nproc))

    # start a tmux session with name "wmpi"
    tmux_server = libtmux.Server()
    tmux_session = tmux_server.new_session("wmpi")
    tmux_session.set_option("remain-on-exit", "on")

    # create a new window in the tmux session for each dtach instance
    for px in range(nproc):
        if px == 0:
            # get first window
            w = tmux_session.windows[0]
            w.rename_window(str(px))
        else:
            w = tmux_session.new_window(attach=False, window_name=str(px))

        pane = w.list_panes()[0]
        win_cmd = "dtach -a " + socket_files[px]
        pane.send_keys(win_cmd)

    # now the tmux windows are connected to the dtach instances we let the program run
    # we use a file as lock that prevents the command from starting before the tmux windows are connected
    lock_file = os.path.join(temp_dir.name, "lock")
    with open(lock_file, "w") as fh:
        fh.write("1")

    print("\nUse: tmux attach -t wmpi")

    # Try to terminate cleanly
    mpiproc.communicate()
    a = input("\nPress Enter to kill tmux session and quit")
    tmux_session.kill_session()
    temp_dir.cleanup()


def dtach_child():
    """
    Creates a new dtach instance with a socket in the temp dir that runs this script again to invoke exec_child.
    """
    dtach_socket = os.path.join(tempfile.mkdtemp(dir=sys.argv[2]), "dtach.socket")
    cmd = sys.argv[3:]
    dtach_cmd = ["dtach", "-N", dtach_socket, sys.executable, PROGRAM_PATH, "EXEC_CHILD", sys.argv[2]] + cmd

    # Using execv worked for mpich/openmpi but not intel MPI, using pty.spawn seems to keep intel MPI happy
    pty.spawn(dtach_cmd)


def exec_child():
    """
    Waits for the lock file to be created then runs the user command.
    """
    lock_file = os.path.join(sys.argv[2], "lock")
    cmd = sys.argv[3:]
    while not os.path.exists(lock_file):
        time.sleep(0.1)
    # launch the actual user command
    os.execv(shutil.which(cmd[0]), cmd)


if __name__ == "__main__":

    if sys.argv[1] == "DTACH_CHILD":
        dtach_child()
    elif sys.argv[1] == "EXEC_CHILD":
        exec_child()
    else:
        main()
