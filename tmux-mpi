#!/usr/bin/env python3
"""
Usage: tmux-mpi <nproc> <command>
System requirements: dtach, tmux
Pip requirements: libtmux
"""

import libtmux
import sys
import subprocess
import tempfile
import os
import glob
import time
import shutil
import pty
import atexit
import psutil
import shlex

PROGRAM_PATH = os.path.abspath(__file__)


def check_dtach():
    dtach = shutil.which("dtach")
    if dtach == None:
        raise RuntimeWarning("This tool requires dtach. We could not find dtach using which.")


def print_help():
    print(
        """tmux-mpi is a tool for running MPI processes in tmux windows. Run with:

    tmux-mpi <nproc> <executable>

If the program crashes there are likely to be dtach instances that will need
manually cleaning up.
"""
    )

    exit(-1)


def check_args():
    if len(sys.argv) < 3:
        print_help()


def main():

    nproc = int(sys.argv[1])
    cmd = sys.argv[2:]

    # directory for dtach sockets
    temp_dir = tempfile.TemporaryDirectory(prefix="tmux-mpi")

    if "TMUX_MPI_MPIRUN" in os.environ.keys():
        mpi_exec = shlex.split(os.environ["TMUX_MPI_MPIRUN"])
    else:
        mpi_exec = ["mpiexec"]

    # do the mpi launch
    launch_cmd = mpi_exec + ["-n", str(nproc), sys.executable, PROGRAM_PATH, "DTACH_CHILD", temp_dir.name] + cmd
    mpiproc = subprocess.Popen(launch_cmd)

    # Wait for all the dtach processes to create sockets before trying to connect to them
    def get_socket_files():
        return glob.glob(os.path.join(temp_dir.name, "*", "dtach.socket"))

    time.sleep(0.2)
    socket_files = get_socket_files()
    while len(socket_files) != nproc:
        print("Waiting for dtach sockets to appear. Found {} out of {}.".format(len(socket_files), nproc))
        time.sleep(0.2)
        socket_files = get_socket_files()
    print("Waiting for dtach sockets to appear. Found {} out of {}.".format(len(socket_files), nproc))
    
    print(socket_files)

    # start a tmux session with name "tmux-mpi"
    tmux_server = libtmux.Server()
    if tmux_server.has_session("tmux-mpi"):
        tmux_session = tmux_server.find_where({"session_name": "tmux-mpi"})
        tmux_session.kill_session()
    tmux_session = tmux_server.new_session("tmux-mpi")
    tmux_session.set_option("remain-on-exit", "on")
    time.sleep(0.5)


    # create a new window in the tmux session for each dtach instance
    for px in range(nproc):
        if px == 0:
            # get first window
            w = tmux_session.windows[0]
            w.rename_window(str(px))
        else:
            w = tmux_session.new_window(attach=False, window_name=str(px))

        pane = w.list_panes()[0]
        win_cmd = "dtach -a " + socket_files[px]
        pane.send_keys(win_cmd)

    mpiproc_children = psutil.Process(mpiproc.pid).children(recursive=True)

    time.sleep(1.0)
    # register the atexit function that tries to cleanup if needed
    def cleanup():
        try:
            temp_dir.cleanup()
        except Exception as e:
            print(e)

        try:
            tmux_session.kill_session()
        except Exception as e:
            print(e)

        try:
            mpiproc.kill()
        except Exception as e:
            pass

        for pidx in mpiproc_children:
            try:
                pidx.kill()
            except Exception as e:
                pass

    atexit.register(cleanup)

    # loop over the tmux windows and send a newline to allow the execution to continue
    # exists to prevent the program execution completing before the tmux pane is attached
    #with open(os.path.join(temp_dir.name, "release"), "w+") as fh:
    #        fh.write("1")


    #for wx in tmux_session.list_windows():
    #    print(wx)
    #    wx.list_panes()[0].enter()

    print(
        """
To connect use

    tmux attach

or

    tmux attach -t tmux-mpi

if you have existing tmux sessions.
"""
    )

    # Try to terminate cleanly
    mpiproc.communicate()
    a = input("\nPress Enter to kill tmux session and quit")


def dtach_child():
    """
    Creates a new dtach instance with a socket in the temp dir that runs this script again to invoke exec_child.
    """
    dtach_socket = os.path.join(tempfile.mkdtemp(dir=sys.argv[2]), "dtach.socket")
    cmd = sys.argv[3:]
    dtach_cmd = ["dtach", "-N", dtach_socket, "-E", "-z", sys.executable, PROGRAM_PATH, "EXEC_CHILD", sys.argv[2]] + cmd

    # Using execv worked for mpich/openmpi but not intel MPI, using pty.spawn seems to keep intel MPI happy
    pty.spawn(dtach_cmd)


def exec_child():
    """
    Waits for the newline from libtmux then runs the user command.
    """

    # Wait for the newline to be send that indicates all the tmux windows are connected.
    # a = input("Waiting for tmux windows to all be connected...\n")
    
    while not os.path.exists(os.path.join(sys.argv[2], "release")):
        time.sleep(0.1)

    # launch the actual user command
    cmd = sys.argv[3:]
    os.execv(shutil.which(cmd[0]), cmd)


if __name__ == "__main__":
    check_dtach()
    check_args()

    if sys.argv[1] == "DTACH_CHILD":
        dtach_child()
    elif sys.argv[1] == "EXEC_CHILD":
        exec_child()
    else:
        main()
